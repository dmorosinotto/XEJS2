/* HOISTING DELLE VARIABILI E DELLE FUNZIONI */var foo = true;function test() {    if (!foo) {         var foo = 10;    }    console.log(foo); //10    bar(); // "Posso richiamare sempre le funzioni dichiarate come LITERAL, perchè subisce HOISTING di tutto!"    baz(); // ERRORE TypeError "baz is not a function"    boo(); // ERRORE ERRORE ReferenceError: "boo is not defined"    var baz = function boo() { // function expression assigned to local variable 'baz'         console.error("Questa funzione NON subisce HOISTING perchè è usata come espressione, segue la regola delle variabili!");    }    function bar() { // function declaration, given the name 'bar'        console.warn("Posso richiamare sempre le funzioni dichiarate come LITERAL, perchè subisce HOISTING di tutto!");    }}test();//ECCO COME JAVASCRIPT RE-INTERPRETA IL NOSTRO CODICE//var x=...; --> viene divisa in var x; //undefined in testa alla funzione e x=...; dove c'era la dichiarazione//function f() {...} --> viene divisa in var f; f=function() { ... } ENTRAMBE spostato in testa alla funzione!! /*var foo = true;function test() {    var foo, baz; //HOISTING DELLE VARIABILI + foo nasconde la variabile esterna (che era =true), ora foo=undefined!!!    var bar; //HOISTING DI TUTTA LA FUNZIONE    bar = function bar() {         console.warn("Posso richiamare sempre le funzioni dichiarate come LITERAL, perchè subisce HOISTING di tutto!");    }    if (!foo) { //undefined è valutato FALSE!        foo = 10; //VIENE ESEGUITO PERCHE' foo è undefined non è true!    }    console.log(foo);    //10    bar(); // "Posso richiamare sempre le funzioni dichiarate come LITERAL, perchè subisce HOISTING di tutto!"    baz(); // ERRORE TypeError "baz is not a function"    perchè baz è undefined, NON ha ancora assegnato la funzione    boo(); // ERRORE ReferenceError: "boo is not defined" perchè boo non esiste da nessuna parte come nome!    baz = function boo() { // NON HO HOISTING DELLA FUNZIONE        console.warn("questa non funziona, perchè è una function expression");    }}test();*/